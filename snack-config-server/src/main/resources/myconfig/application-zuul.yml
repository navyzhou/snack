server:
   port: 80

spring:
   application:
      name: zuul-server
  
   redis:
      database: 0
      host: 192.168.99.100
      prot: 6379
      password:
      timeout: 5000
      jedis:
         pool:
            max-active: 8

zuul:
   # 开始重试机制
   retryable: true
   # 所有服务的敏感头不都过滤
   sensitive-headers: 
   max:
      host:
         connections: 500
   host:
      # 最大连接数，默认是200
      max-total-connections: 200
      # 每个路由的最大连接数， 默认是20
      max-per-route-connections: 20
   routes:
      # 写一个标识你服务的名称
      service-rpc-user:
         path: /user/**
         service-id: user-server
         
      service-rpc-product:
         path: /product/**
         service-id: product-server
         
      # 上面的缩写方式就是  服务器名: 拦截路径
      order-server: /order/**

# Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1s，很容易就触发了
ribbon:
   # 连接超时时间(ms)
   ConnectTimeout: 3000
   # 通信超时时间(ms)
   ReadTimeout: 5000
   # 是否对所有操作重试
   OkToRetryOnAllOperations: true
   # 同一服务不同实例的重试次数
   MaxAutoRetriesNextServer: 2
   # 同一实例的重试次数
   MaxAutoRetries: 1
   
hystrix:
   command:
      default:
         execution:
            isolation:
               thread:
                  # 熔断超时时长：6000ms
                  timeoutInMilliseconds: 6000

eureka:
   client:
      service-url:
         defaultZone: http://navy:123321@127.0.0.1:6611/eureka

#logging:
#   level:
#      root: debug